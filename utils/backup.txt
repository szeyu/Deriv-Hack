from pyzerox import zerox
import os
from dotenv import load_dotenv
import streamlit as st

# Load environment variables from .env file
load_dotenv()

###################### Example for OpenAI ######################
model = "gpt-4o-mini"  # openai model
os.environ["OPENAI_API_KEY"] = os.getenv(
    "OPENAI_API_KEY"
)  # Load API key from .env file

###################### Example for Gemini ######################
# model = "gemini/gpt-4o-mini" ## "gemini/<gemini_model>" -> format <provider>/<model>
# os.environ['GEMINI_API_KEY'] = "" # your-gemini-api-key


async def zerox_model(file_path, custom_system_prompt=None):
    try:
        print(f"Processing file: {file_path}")
        if not os.path.exists(file_path):
            print(f"Error: File does not exist at {file_path}")
            return None

        result = await zerox(
            file_path=file_path,
            model="default-model",  # Replace with your actual model
            output_dir="output",  # Replace with your actual output directory
            custom_system_prompt=custom_system_prompt,
        )

        if result is None:
            print("Error: zerox function returned None")
            return None

        print("zerox_model completed successfully.")
        return result

    except Exception as e:
        print(f"Exception in zerox_model: {e}")
        return None
